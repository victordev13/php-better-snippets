{
    "Symfony Controller (annotations)": {
        "prefix": "controller",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;\n",
            "/** @Route(path=\"$3\", name=\"$4\", methods=\"${5|GET,POST,PUT,DELETE,PATCH|}\") */",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): Response",
            "\t{",
            "\t\treturn \\$this->render('$6');",
            "\t}",
            "}"
        ],
        "description": "Symfony Controller (annotations)"
    },
    "Symfony Controller and return Json (annotations)": {
        "prefix": "controllerJson",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;\n",
            "/** @Route(path=\"$3\", name=\"$4\", methods=\"${5|GET,POST,PUT,DELETE,PATCH|}\") */",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): JsonResponse",
            "\t{",
            "\t\treturn \\$this->json([]);",
            "\t}",
            "}"
        ],
        "description": "Symfony Controller and return Json (annotations)"
    },
    "Symfony Controller (attributes)": {
        "prefix": "controller",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;",
            "\n#[Route('$3', methods: '${4|GET,POST,PUT,DELETE,PATCH|}')]",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): Response",
            "\t{",
            "\t\treturn \\$this->render('$5');",
            "\t}",
            "}"
        ],
        "description": "Symfony Controller and return Json (attributes)"
    },
    "Symfony Controller and return Json (attributes)": {
        "prefix": "controllerJson",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;",
            "\n#[Route('$3', methods: '${4|GET,POST,PUT,DELETE,PATCH|}')]",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): JsonResponse",
            "\t{",
            "\t\treturn \\$this->json([]);",
            "\t}",
            "}"
        ],
        "description": "Symfony Controller and return Json (attributes)"
    },
    "Symfony Route attribute": {
        "prefix": "route",
        "scope": "php",
        "body": "#[Route('$1', name '$2', methods: '${3|GET,POST,PUT,DELETE,PATCH|}')]",
        "description": "Symfony Route attribute"
    },
    "Symfony Route annotation": {
        "prefix": "route",
        "scope": "php",
        "body": "/** @Route(path=\"$3\", name=\"$4\", methods=\"${5|GET,POST,PUT,DELETE,PATCH|}\") */",
        "description": "Symfony Route annotation"
    },
    "Symfony Form Class": {
        "prefix": "form",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Form\\AbstractType;",
            "use Symfony\\Component\\Form\\FormBuilderInterface;",
            "use Symfony\\Component\\OptionsResolver\\OptionsResolver;",
            "\nclass ${TM_FILENAME_BASE} extends AbstractType",
            "{",
            "\tpublic function buildForm(FormBuilderInterface \\$builder, array \\$options): void",
            "\t{",
            "\t}\n",
            "\tpublic function configureOptions(OptionsResolver \\$resolver): void",
            "\t{",
            "\t\t\\$resolver->setDefaults([",
            "\t\t\t'allow_extra_fields' => true,",
            "\t\t\t\/\/ 'data_class' => ,",
            "\t\t]);",
            "\t}",
            "}"
        ],
        "description": "Symfony Form Class"
    },

    "Symfony Custom Normalizer Class (old versions)": {
        "prefix": "normalizer",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n",
            "class ${TM_FILENAME_BASE} implements NormalizerInterface",
            "{",
            "\t/**",
            "\t * @param $1 \\$object",
            "\t * @param string|null \\$format",
            "\t * @param mixed[] \\$context",
            "\t */",
            "\tpublic function normalize(\\$object, \\$format = null, \\$context = []): array",
            "\t{",
            "\t\treturn ${2:[]};",
            "\t}\n",
            "\t/**",
            "\t * @param string|null \\$format",
            "\t * @param mixed[] \\$context",
            "\t */",
            "\tpublic function supportsNormalization(\\$data, \\$format = null, \\$context = []): bool",
            "\t{",
            "\t\treturn \\$data instanceof $1;",
            "\t}",
            "}"
        ],
        "description": "Symfony Custom Normalizer Class (old versions)"
    },
    "Symfony Custom Normalizer Class (Symfony ^6.*)": {
        "prefix": "normalizer",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n",
            "class ${TM_FILENAME_BASE} implements NormalizerInterface",
            "{",
            "\t/**",
            "\t * @param $1 \\$object",
            "\t * @param mixed[] \\$context",
            "\t */",
            "\tpublic function normalize($1 \\$object, ?string \\$format = null, array \\$context = []): array",
            "\t{",
            "\t\treturn [$2];",
            "\t}\n",
            "\t/**",
            "\t * @param mixed[] \\$context",
            "\t */",
            "\tpublic function supportsNormalization(mixed \\$data, ?string \\$format = null, array \\$context = []): bool",
            "\t{",
            "\t\treturn \\$data instanceof $1;",
            "\t}\n",
            "\t/** @return array<string,bool> */",
            "\tpublic function getSupportedTypes(?string \\$format): array",
            "\t{",
            "\t\treturn [$1::class => true];",
            "\t}",
            "}"
        ],
        "description": "Symfony Custom Normalizer Class (Symfony ^6.4)"
    },

    "Symfony Custom Denormalizer Class (Symfony old versions)": {
        "prefix": "denormalizer",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface;\n",
            "class ${TM_FILENAME_BASE} implements DenormalizerInterface",
            "{",
            "\t/**",
            "\t * @param mixed[] \\$data",
            "\t * @param string \\$type",
            "\t * @param string|null \\$format",
            "\t * @param mixed[] \\$context",
            "\t * @return ${2:mixed}",
            "\t*/",
            "\tpublic function denormalize(\\$data, \\$type, \\$format = null, \\$context = [])",
            "\t{",
            "\t\treturn $3;",
            "\t}\n",
            "\t/**",
            "\t * @param mixed[] \\$data",
            "\t * @param string \\$type",
            "\t * @param string|null \\$format",
            "\t * @param mixed[] \\$context",
            "\t * @return bool",
            "\t*/",
            "\tpublic function supportsDenormalization(\\$data, \\$type, \\$format = null, \\$context = [])",
            "\t{",
            "\t\treturn $1::class === \\$type;",
            "\t}",
            "}"
        ],
        "description": "Symfony Custom Denormalizer Class (Symfony old versions)"
    },
    "Symfony Custom Denormalizer Class (Symfony ^6.4)": {
        "prefix": "denormalizer",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface;\n",
            "class ${TM_FILENAME_BASE} implements DenormalizerInterface",
            "{",
            "\t/**",
            "\t * @param mixed[] \\$context",
            "\t*/",
            "\tpublic function denormalize(mixed \\$data, string \\$type, ?string \\$format = null, array \\$context = []): ${2:mixed}",
            "\t{",
            "\t\treturn $3;",
            "\t}\n",
            "\t/**",
            "\t * @param mixed[] \\$context",
            "\t*/",
            "\tpublic function supportsDenormalization(mixed \\$data, string \\$type, ?string \\$format = null, array \\$context = []): bool",
            "\t{",
            "\t\treturn $1::class === \\$type;",
            "\t}\n",
            "\t/** @return array<string,bool> */",
            "\tpublic function getSupportedTypes(?string \\$format): array",
            "\t{",
            "\t\treturn [$1::class => true];",
            "\t}",
            "}"
        ],
        "description": "Symfony Custom Denormalizer Class (Symfony ^6.4)"
    },

    "Symfony Console Command (Symfony ^6.4)": {
        "prefix": "command",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Console\\Attribute\\AsCommand;",
            "use Symfony\\Component\\Console\\Command\\Command;",
            "use Symfony\\Component\\Console\\Input\\InputInterface;",
            "use Symfony\\Component\\Console\\Output\\OutputInterface;\n",
            "#[AsCommand(name: '$1')]",
            "class ${TM_FILENAME_BASE} extends Command",
            "{",
            "\tprotected function configure(): void",
            "\t{",
            "\t\t$2",
            "\t}\n",
            "\tprotected function execute(InputInterface \\$input, OutputInterface \\$output): int",
            "\t{",
            "\t\t$3",
            "\t\treturn Command::SUCCESS;",
            "\t}",
            "}"
        ],
        "description": "Symfony Console Command (Symfony ^6.4)"
    },
    "Symfony Console Command (Symfony from 5.X to 6.3)": {
        "prefix": "command",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Console\\Command\\Command;",
            "use Symfony\\Component\\Console\\Input\\InputInterface;",
            "use Symfony\\Component\\Console\\Output\\OutputInterface;\n",
            "class ${TM_FILENAME_BASE} extends Command",
            "{",
            "\tprotected static \\$defaultName = '$1';\n",
            "\tprotected function configure(): void",
            "\t{",
            "\t\t$2",
            "\t}\n",
            "\tprotected function execute(InputInterface \\$input, OutputInterface \\$output): int",
            "\t{",
            "\t\t$3",
            "\t\treturn Command::SUCCESS;",
            "\t}",
            "}"
        ],
        "description": "Symfony Console Command (Symfony from 5.X to 6.3)"
    },
    "Symfony Console Command (Symfony old versions)": {
        "prefix": "command",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Console\\Command\\Command;",
            "use Symfony\\Component\\Console\\Input\\InputInterface;",
            "use Symfony\\Component\\Console\\Output\\OutputInterface;\n",
            "class ${TM_FILENAME_BASE} extends Command",
            "{",
            "\tprotected static \\$defaultName = '$1';\n",
            "\tprotected function configure(): void",
            "\t{",
            "\t\t$2",
            "\t}\n",
            "\tprotected function execute(InputInterface \\$input, OutputInterface \\$output): int",
            "\t{",
            "\t\t$3",
            "\t\treturn 0; // success",
            "\t}",
            "}"
        ],
        "description": "Symfony Console Command (Symfony old versions)"
    },

    "PHPUnit Test class": {
        "prefix": "test",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use PHPUnit\\Framework\\TestCase;\n",
            "class ${TM_FILENAME_BASE} extends TestCase",
            "{\n$3}"
        ],
        "description": "PHPUnit Test class"
    },

    "dd (alternative to dd function with dump and die)": {
        "prefix": "dd",
        "scope": "php",
        "body": [
            "dump($1);",
            "die;"
        ],
        "description": "dd (alternative to dd function with dump and die)"
    }
}
