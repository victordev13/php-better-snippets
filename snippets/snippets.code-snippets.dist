{
    "PHP open tag": {
        "prefix": "php",
        "body": "<?php",
        "description": "PHP open tag"
    },
    "New PHP Class": {
        "prefix": "phpc",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "class ${TM_FILENAME_BASE}",
            "{\n$3}\n"
        ],
        "description": "New PHP Class"
    },
    "New PHP readonly Class": {
        "prefix": "phprc",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "readonly class ${TM_FILENAME_BASE}",
            "{\n$3}\n"
        ],
        "description": "New readonly PHP Class"
    },
    "New PHP abstract Class": {
        "prefix": "phpac",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "abstract class ${TM_FILENAME_BASE}",
            "{\n$3}\n"
        ],
        "description": "New abstract PHP Class"
    },
    "PHP Attribute": {
        "prefix": "#",
        "body": "#[$1]",
        "scope": "php",
        "description": "PHP Attribute"
    },
    "New 'execute' function": {
        "scope": "php",
        "prefix": "ex",
        "body": [
            "public function execute($1): ${2|$PHP_FUNCTION_RETURN_TYPE|}",
            "{",
            "\t$3",
            "}"
        ],
        "description": "New 'execute' function"
    },
    "PHP constructor": {
        "scope": "php",
        "prefix": "__",
        "body": [
            "${1|public,protected,private|} function __construct($2)",
            "{",
            "\t$3",
            "}"
        ],
        "description": "PHP Constructor"
    },
    "PHP __invoke function": {
        "scope": "php",
        "prefix": "inv",
        "body": [
            "public function __invoke($1): ${2|$PHP_FUNCTION_RETURN_TYPE|}",
            "{",
            "\t$3",
            "}"
        ],
        "description": "PHP __invoke function"
    },
    "New PHP Service": {
        "prefix": "service",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "class ${TM_FILENAME_BASE}",
            "{",
            "\tpublic function execute($3): ${4|$PHP_FUNCTION_RETURN_TYPE|}",
            "\t{",
            "\t}",
            "}"
        ],
        "description": "New PHP Service with 'execute' method"
    },
    "Setter": {
        "prefix": "set",
        "scope": "php",
        "body": [
            "public function set${1/(.)/${1:/capitalize}/}(${2|$PHP_VARIABLE_TYPE|} \\$${1/(.)/${1:/downcase}/}): self",
            "{",
            "\t\\$this->${1/(.)/${1:/downcase}/} = \\$${1/(.)/${1:/downcase}/};\n",
            "\treturn \\$this;",
            "}\n",
        ],
        "description": "Property Setter"
    },
    "Getter": {
        "prefix": "get",
        "scope": "php",
        "body": [
            "public function get${1/(.)/${1:/capitalize}/}(): ${2|$PHP_VARIABLE_TYPE|}",
            "{",
            "\treturn \\$this->${1/(.)/${1:/downcase}/};",
            "}\n\n$3"
        ],
        "description": "Property Getter"
    },
    "Getter and Setter": {
        "prefix": "sg",
        "scope": "php",
        "body": [
            "public function set${1/(.)/${1:/capitalize}/}(${2|$PHP_VARIABLE_TYPE|} $${1/(.)/${1:/downcase}/}): self",
            "{",
            "\t\\$this->${1/(.)/${1:/downcase}/} = \\$${1/(.)/${1:/downcase}/};\n",
            "\treturn \\$this;",
            "}\n",
            "public function get${1/(.)/${1:/capitalize}/}(): ${2|$PHP_VARIABLE_TYPE|}",
            "{",
            "\treturn \\$this->${1/(.)/${1:/downcase}/};",
            "}\n\n$3"
        ],
        "description": "Getter and Setter"
    },
    "Getter without prefix": {
        "prefix": "wget",
        "scope": "php",
        "body": [
            "public function ${1/(.)/${1:/downcase}/}(): ${2|$PHP_VARIABLE_TYPE|}",
            "{",
            "\treturn \\$this->${1/(.)/${1:/downcase}/};",
            "}\n\n$3"
        ],
        "description": "Create a new PHP property setter function"
    },
    "Getter and Setter without 'get' prefix": {
        "prefix": "wsg",
        "scope": "php",
        "body": [
            "public function set${1/(.)/${1:/capitalize}/}(${2|$PHP_VARIABLE_TYPE|} $${1/(.)/${1:/downcase}/}): self",
            "{",
            "\t\\$this->${1/(.)/${1:/downcase}/} = $${1/(.)/${1:/downcase}/};\n",
            "\treturn \\$this;",
            "}\n",
            "public function $1(): ${2|$PHP_VARIABLE_TYPE|}",
            "{",
            "\treturn \\$this->${1/(.)/${1:/downcase}/};",
            "}\n\n$3"
        ],
        "description": "Getter and Setter without 'get' prefix"
    },
    "Function": {
        "prefix": "fnc",
        "scope": "php",
        "body": [
            "${1|public,protected,private|} function $2($3): ${4|$PHP_FUNCTION_RETURN_TYPE|}",
            "{",
            "\t$5",
            "}"
        ],
        "description": "Create a new PHP function"
    },
    "Anonymous function": {
        "prefix": "fn",
        "scope": "php",
        "body": [
            "fn ($2) => $3",
        ],
        "description": "Create a new PHP anonymous function"
    },
    "Static Function": {
        "prefix": "st",
        "scope": "php",
        "body": [
            "public static function $1($2): ${3:static}",
            "{",
            "\t$4",
            "}"
        ],
        "Create a new PHP static function"
    },
    "Private Function": {
        "prefix": "prf",
        "scope": "php",
        "body": [
            "private function $1($2): ${3|$PHP_FUNCTION_RETURN_TYPE|}",
            "{",
            "\t$4",
            "}"
        ],
        "description": "Create a new PHP private function"
    },
    "PHP Namespace": {
        "prefix": "name",
        "scope": "php",
        "body": [
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
        ],
        "description": "PHP Namespace"
    },
    "jsonSerialize Function": {
        "prefix": "json",
        "scope": "php",
        "body": [
            "/** @return mixed[] */",
            "public function jsonSerialize(): array",
            "{",
            "\treturn [",
            "\t\t'$1' => \\$this->$1,",
            "\t];",
            "}"
        ],
        "description": "Create a new PHP jsonSerialize function"
    },
    "Current filename": {
        "prefix": "fname",
        "body": "${TM_FILENAME_BASE}",
        "description": "Get current filename"
    },
    "Boolean method": {
        "prefix": "is",
        "scope": "php",
        "body": [
            "${1|public,protected,private|} function is${2/(.)/${1:/capitalize}/}(): bool",
            "{",
            "\treturn $3;",
            "}\n\n"
        ],
        "description": "Create a new PHP function to return boolean if is something"
    },
    "PHP Interface": {
        "prefix": "interface",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "interface ${TM_FILENAME_BASE}",
            "{\n    $3\n}\n"
        ],
        "description": "New PHP interface"
    },
    "PHP Enum": {
        "prefix": "enum",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "enum ${TM_FILENAME_BASE}",
            "{\n    $3\n}\n"
        ],
        "description": "PHP Enum"
    },
    "PHP Backed Enum": {
        "prefix": "bnum",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "enum ${TM_FILENAME_BASE}: ${3|string,int|}",
            "{\n    case $4\n}\n"
        ],
        "description": "PHP Backed Enum"
    },
    "Private property": {
        "prefix": "pv",
        "scope": "php",
        "body": "${1|private,protected,public|} ${2|$PHP_VARIABLE_TYPE|} \\$$3;",
        "description": "New PHP private property"
    },
    "Public property": {
        "prefix": "pp",
        "scope": "php",
        "body": "${1|public,private,protected|} ${2|$PHP_VARIABLE_TYPE|} \\$$3;",
        "description": "New PHP public property"
    },
    "Private readonly property": {
        "prefix": "pvr",
        "scope": "php",
        "body": "${1|private,protected,public|} readonly ${2|$PHP_VARIABLE_TYPE|} \\$$3;",
        "description": "New PHP private readonly property"
    },
    "Public readonly property": {
        "prefix": "pbr",
        "scope": "php",
        "body": "${1|public,private,protected|} readonly ${2|$PHP_VARIABLE_TYPE|} \\$$3;",
        "description": "Public readonly property"
    },
    "PHP ternary conditional": {
        "prefix": "?",
        "scope": "php",
        "body": "$1 ? $2 : $3",
        "description": "PHP ternary conditional"
    },
    "PHP constant": {
        "prefix": "c",
        "body": "${1|public,private,protected|} const ${2/(.*)/${1:/upcase}/} = $3;",
        "scope": "php",
        "description": "PHP constant"
    },
    "PHP throw new Exception": {
        "prefix": "throw",
        "scope": "php",
        "body": "throw new ${1|$PHP_POSSIBLE_EXCEPTIONS|}('$2');",
        "description": "PHP throw new Exception"
    },
    "New PHP exception class": {
        "prefix": "phpex",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "class ${TM_FILENAME_BASE} extends ${1|$PHP_POSSIBLE_EXCEPTIONS|}",
            "{\n$3}\n"
        ],
        "description": "New PHP exception class"
    },
    "Symfony Controller (annotations)": {
        "prefix": "controller",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;\n",
            "/** @Route(path=\"$3\", name=\"$4\", methods=\"${5|GET,POST,PUT,DELETE,PATCH|}\") */",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): Response",
            "\t{",
            "\t\treturn \\$this->render('$6');",
            "\t}",
            "}",
        ],
        "description": "Symfony Controller (annotations)"
    },
    "Symfony Controller and return Json (annotations)": {
        "prefix": "controllerJson",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;\n",
            "/** @Route(path=\"$3\", name=\"$4\", methods=\"${5|GET,POST,PUT,DELETE,PATCH|}\") */",
            "class ${TM_FILENAME_BASE} extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): JsonResponse",
            "\t{",
            "\t\treturn \\$this->json([]);",
            "\t}",
            "}",
        ],
        "description": "Symfony Controller and return Json (annotations)"
    },
    "Symfony Controller (attributes)": {
        "prefix": "controller",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;",
            "\n#[Route('$3', methods: '${4|GET,POST,PUT,DELETE,PATCH|}')]",
            "class Controller extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): Response",
            "\t{",
            "\t\treturn \\$this->render('$5');",
            "\t}",
            "}",
        ],
        "description": "Symfony Controller and return Json (attributes)"
    },
    "Symfony Controller and return Json (attributes)": {
        "prefix": "controllerJson",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
            "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
            "use Symfony\\Component\\HttpFoundation\\Request;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;",
            "\n#[Route('$3', methods: '${4|GET,POST,PUT,DELETE,PATCH|}')]",
            "class Controller extends AbstractController",
            "{",
            "\tpublic function __invoke(Request \\$request): JsonResponse",
            "\t{",
            "\t\treturn \\$this->json([]);",
            "\t}",
            "}",
        ],
        "description": "Symfony Controller and return Json (attributes)"
    },
    "Symfony Form file": {
        "prefix": "form",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Symfony\\Component\\Form\\AbstractType;",
            "use Symfony\\Component\\Form\\FormBuilderInterface;",
            "use Symfony\\Component\\OptionsResolver\\OptionsResolver;",
            "\nclass ${TM_FILENAME_BASE} extends AbstractType",
            "{",
            "\tpublic function buildForm(FormBuilderInterface \\$builder, array \\$options): void",
            "\t{",
            "\t}\n",
            "\tpublic function configureOptions(OptionsResolver \\$resolver): void",
            "\t{",
            "\t\t\\$resolver->setDefaults([",
            "\t\t\t'allow_extra_fields' => true,",
            "\t\t\t\/\/ 'data_class' => ,",
            "\t\t]);",
            "\t}",
            "}"
        ],
        "description": "Symfony Form file"
    },
    "Symfony Doctrine ORM repository": {
        "prefix": "ormRepo",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;",
            "use Doctrine\\Persistence\\ManagerRegistry;\n",
            "/**",
            " * @extends ServiceEntityRepository<$3>",
            " * @method $3|null find(\\$id, \\$lockMode = null, \\$lockVersion = null)",
            " * @method $3|null findOneBy(array \\$criteria, array \\$orderBy = null)",
            " * @method $3[]    findAll()",
            " * @method $3[]    findBy(array \\$criteria, array \\$orderBy = null, \\$limit = null, \\$offset = null)",
            " */",
            "class ${TM_FILENAME_BASE} extends ServiceEntityRepository",
            "{",
            "\tpublic function __construct(ManagerRegistry \\$managerRegistry)",
            "\t{",
            "\t\tparent::__construct(\\$managerRegistry, $3::class);",
            "\t}",
            "}"
        ],
        "descriptions": "Symfony Doctrine ORM repository"
    },
    "Symfony Doctrine ORM Entity class (attributes)": {
        "prefix": "ormEntity",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Doctrine\\ORM\\Mapping as ORM;\n",
            "#[ORM\\Entity]",
            "class ${TM_FILENAME_BASE}",
            "{",
            "\t$4",
            "}"
        ],
        "description": "Symfony Doctrine ORM Entity class (attributes)"
    },
    "Symfony Doctrine ORM Entity class (annotations)": {
        "prefix": "ormEntity",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use Doctrine\\ORM\\Mapping as ORM;\n",
            "/**",
            " * @ORM\\Entity",
            " */",
            "class ${TM_FILENAME_BASE}",
            "{",
            "\t$4",
            "}"
        ],
        "description": "Symfony Doctrine ORM Entity class (annotations)"
    },
    "Symfony Doctrine ORM Column (attributes)": {
        "prefix": "ormCol",
        "scope": "php",
        "body": "#[ORM\\Column]",
        "description": "Symfony Doctrine ORM Column (attributes)"
    },
    "Symfony Doctrine ORM Column (annotations)": {
        "prefix": "ormCol",
        "scope": "php",
        "body": [
            "/**"
            " * @ORM\\Column(name=\"$1\", type=\"$2\")",
            " */",
        ],
        "description": "Symfony Doctrine ORM Column (annotations)"
    },
    "Symfony Doctrine ORM auto generated id column (annotations)": {
        "prefix": "ormId",
        "scope": "php",
        "body": [
            "/**",
            " * @ORM\\Id",
            " * @ORM\\Column(name=\"${1:id}\"$2)",
            " * @ORM\\GeneratedValue(strategy=\"AUTO\")",
            " */",
        ],
        "description": "Symfony Doctrine ORM auto generated id column (annotations)"
    },
    "Symfony Doctrine ORM auto generated id column (attributes)": {
        "prefix": "ormId",
        "scope": "php",
        "body": [
            "#[ORM\\Id]",
            "#[ORM\\GeneratedValue]",
            "#[ORM\\Column(name: '${1:id}'$2)]",
        ],
        "description": "Symfony Doctrine ORM auto generated id column (attributes)"
    },
    "Symfony Doctrine ORM Many To[One|Many] Relation (attributes)": {
        "prefix": "ormManyTo",
        "scope": "php",
        "body": "#[ORM\\ManyTo${1|Many,One|}(targetEntity: $2::class, cascade: ['${3|all,persist,remove|}'])]",
        "description": "Symfony Doctrine ORM Many To[One|Many] Relation (attributes)"
    },
    "Symfony Doctrine ORM Many To[One|Many] Relation (annotations)": {
        "prefix": "ormManyTo",
        "scope": "php",
        "body": [
            "/**",
            " * @ORM\\ManyTo${1|Many,One|}(targetEntity=$2::class, cascade={\"${3|all,persist,remove|}\"})",
            " */",
        ],
        "description": "Symfony Doctrine ORM Many To[One|Many] Relation (annotations)"
    },
    "Symfony Doctrine ORM One To[One|Many] Relation (attributes)": {
        "prefix": "ormOneTo",
        "scope": "php",
        "body": "#[ORM\\OneTo${1|Many,One|}(targetEntity: $2::class, mappedBy: '$3', cascade: ['${4|all,persist,remove|}'])]",
        "description": "Symfony Doctrine ORM One To[One|Many] Relation (attributes)"
    },
    "Symfony Doctrine ORM One To[One|Many] Relation (annotations)": {
        "prefix": "ormOneTo",
        "scope": "php",
        "body": [
            "/**",
            " * @ORM\\OneTo${1|Many,One|}(targetEntity=$2::class, mappedBy=\"$3\", cascade={\"${4|all,persist,remove|}\"})",
            " */",
        ],
        "description": "Symfony Doctrine ORM One To[One|Many] Relation (annotations)"
    },
    "Symfony Doctrine ORM Relation Join Column (annotations)": {
        "prefix": "ormJoinCol",
        "scope": "php",
        "body": "@ORM\\JoinColumn(name=\"$1\", referencedColumnName=\"${2:id}\")",
        "description": "Symfony Doctrine ORM Relation Join Column (annotations)"
    },
    "Symfony Doctrine ORM Relation Join Column (attributes)": {
        "prefix": "ormJoinCol",
        "scope": "php",
        "body": "#[ORM\\JoinColumn(name: '$1', referencedColumnName: '${2:id}')]",
        "description": "Symfony Doctrine ORM Relation Join Column (attributes)"
    },
    "Import Doctrine ORM mapping annotation": {
        "prefix": "orm",
        "scope": "php",
        "body": "use Doctrine\\ORM\\Mapping as ORM;",
        "description": "Import Doctrine ORM mapping annotation"
    },
    "PHPUnit Test class": {
        "prefix": "test",
        "body": [
            "<?php\n",
            "namespace $CUSTOM_NAMESPACE_REGEX;\n",
            "use PHPUnit\\Framework\\TestCase;\n",
            "class ${TM_FILENAME_BASE} extends TestCase",
            "{\n$3}"
        ],
        "description": "PHPUnit Test class"
    },
}
